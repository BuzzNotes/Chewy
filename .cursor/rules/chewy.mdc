---
description: 
globs: 
alwaysApply: true
---
# Cursor Project Rules for Van Configurator

## **General Guidelines**
- This project is a **Van Customization Configurator**.
- Follow **modular programming principles**—keep data, UI components, and logic separate.
- Maintain **clear naming conventions** for categories, models, and options.
- **Do not hardcode values**—use configuration files like `vanData.ts`.

## **File Structure**
- **`/components`** → UI components (e.g., `VanBuilder.tsx`, `ConfigurationStep.tsx`).
- **`/data`** → Configuration options (`vanData.ts`).
- **`/utils`** → Helper functions (e.g., price calculation, formatting).
- **`/styles`** → Custom styles if needed.
- **Main entry point:** `App.tsx`

## **Configuration Rules**
- All selectable options (chassis, color, model, etc.) must be stored in `vanData.ts`.
- Every selection **should update the van preview dynamically**.
- Maintain a **stateful selection system** to track the user's choices.

## **UI Behavior**
- Clicking an option **should instantly update the UI** (image/model preview).
- The **total price must update in real time** based on user selections.
- Ensure **smooth UI transitions** (e.g., animations when switching models).

## **Development Rules**
- Use **React + TypeScript** for all components.
- **State Management:** Prefer `useState` or `useContext` for global state.
- **Styling:** Use TailwindCSS or a simple CSS module for styles.
- **Data Handling:** Store configurations as JSON or TypeScript objects.
- **Performance:** Optimize re-renders by using `useMemo` where necessary.

## **Integrations**
- The final configurator **should be embeddable into a website** (iframe or API).
- Consider a **backend or Firebase integration** if saving configurations is needed.

---

**Notes:**
- You can @ files here for reference.
- You can use Markdown but don’t have to.
